#
# This is the Jasmin Rest-API configuration file.
# The RESTful API allows developers to expand and build their apps on Jasmin. 
# The API makes it easy to send messages to one or many destinations, check 
# balance and routing, as well as enabling bulk messaging.
#
# For any modifications to this file, refer to Jasmin Documentation.
# If that does not help, post your question on Jasmin's web forum
# hosted at Google Groups: https://groups.google.com/group/jasmin-sms-gateway
#
# Do NOT simply read the instructions in here without understanding
# what they do.  They're here only as hints or reminders.  If you are unsure
# consult the online docs.

[celery]
# Configure Celery to use a custom time zone. The timezone value can be any time
# zone supported by the ZoneInfo library. If not set the UTC timezone is used. 
# For backwards compatibility there's also a enable_utc setting, and when this 
# is set to false the system local timezone is used instead.
#timezone                           = UTC

# If enabled dates and times in messages will be converted to use the UTC 
# timezone. Note that workers running Celery versions below 2.5 will assume a 
# local timezone for all messages, so only enable if all workers have been 
# upgraded.
#enable_utc                         = True

# A white-list of content-types/serializers to allow. If a message is 
# received that's not in this list then the message will be discarded 
# with an error. By default only json is enabled but any content type can be 
# added, including pickle and yaml; when this is the case make sure untrusted 
# parties don't have access to your broker. Delimit multiple values 
# using a ',', e.g. json,pickle,yaml
#accept_content                     = json

[amqp-broker]
# The following directives define the way how Jasmin's Rest-API is connecting
# to the AMQP Broker, default values must work with a freshly installed
# RabbitMQ server.
#host				                = 127.0.0.1
#vhost			    	            = /
#port				                = 5672
#username			                = guest
#password			                = guest

# This value is only used by the worker, clients do not use a heartbeat at the 
# moment. It's not always possible to detect connection loss in a timely manner 
# using TCP/IP alone, so AMQP defines something called heartbeats that's is used 
# both by the client and the broker to detect if a connection was closed. If the
# heartbeat value is 10 seconds, then the heartbeat will be monitored at the 
# interval specified by the broker_heartbeat_checkrate setting (by default this
# is set to double the rate of the heartbeat value, so for the 10 seconds, the
# heartbeat is checked every 5 seconds).
#broker_heartbeat                   = 120

# At intervals the worker will monitor that the broker hasn't missed too many 
# heartbeats. The rate at which this is checked is calculated by dividing the 
# broker_heartbeat value with this value, so if the heartbeat is 10.0 and the 
# rate is the default 2.0, the check will be performed every 5 seconds (twice 
# the heartbeat sending rate).
#broker_heartbeat_checkrate         = 2

# The default timeout in seconds before we give up establishing a connection to
# the AMQP server. This setting is disabled when using gevent.
#broker_connection_timeout          = 4

# Automatically try to re-establish the connection to the AMQP broker if lost 
# after the initial connection is made. The time between retries is increased
# for each retry, and is not exhausted before broker_connection_max_retries is 
# exceeded.
#broker_connection_retry            = True

# Automatically try to establish the connection to the AMQP broker on Celery
# startup if it is unavailable. The time between retries is increased for
# each retry, and is not exhausted before broker_connection_max_retries is
# exceeded.
#broker_connection_startup_retry    = True

# Maximum number of retries before we give up re-establishing a connection
# to the AMQP broker. If this is set to None, we'll retry forever.
#broker_connection_max_retries      = 100

# A string identifying the default serialization method to use. Can be json
# (default), pickle, yaml, msgpack, or any custom serialization methods that
# have been registered with kombu.serialization.registry.
# See kombu.serialization for more information.
#task_serializer                    = json

[redis-client]
# The following directives define the way how Jasmin's Rest-API is connecting
# to the redis server, default values must work with a freshly installed redis 
# server.
#host					    	    = 127.0.0.1
#port				    		    = 6379
#password		    			    = None
#result_dbid    				    = 1

# Socket timeout for reading/writing operations to the Redis server in seconds
# (int/float), used by the redis result backend.
#redis_socket_timeout			    = 120

# Time (in seconds, or a timedelta object) for when after stored task 
# tombstones will be deleted. A built-in periodic task will delete the results
# after this time (celery.backend_cleanup), assuming that celery beat is
# enabled. The task runs daily at 4am. A value of None or 0 means results will
# never expire (depending on backend specifications).
#result_expires                     = 86400

# Result serialization format. 
# See https://docs.celeryq.dev/en/stable/userguide/calling.html#calling-serializers
# for information about supported serialization formats.
#result_serializer                  = json

[rest-api]
# Jasmin http API server configuration
#http_api_host                      = 127.0.0.1
#http_api_port                      = 1401

# Show Jasmin's version in http api response headers
#show_jasmin_version                = True

#auth_cache_seconds                 = 10
#auth_cache_max_keys                = 500

# Will push messages back to Jasmin's http api with a maximum throughput *per worker*
# Please consider this is a *per worker* throughput !
# Set to zero (0) to disable throughput control
#http_throughput_per_worker         = 8

# When set to True, the batch executor will consider Jasmin's response time to
# control the batch throughput, slower response time will slow down the throughput
# and vice-versa
#smart_qos                          = True

# Specify the server verbosity level.
# This can be one of:
# NOTSET (disable logging)
# DEBUG (a lot of information, useful for development/testing)
# INFO (moderately verbose, what you want in production probably)
# WARNING (only very important / critical messages and errors are logged)
# ERROR (only errors / critical messages are logged)
# CRITICAL (only critical messages are logged)
#log_level                          = INFO

# Specify the log file path
#log_file                           = /var/log/jasmin/restapi.log

# When to rotate the log file, possible values:
# S:		Seconds
# M:		Minutes
# H:		Hours
# D:		Days
# W0-W6:	Weekday (0=Monday)
# midnight:	Roll over at midnight
#log_rotate                         = W6

# The following directives define logging patterns including:
# - log_format: using python logging's attributes
#               refer to https://docs.python.org/2/library/logging.html#logrecord-attributes
# -log_date_format: using python strftime formating directives
#                   refer to https://docs.python.org/2/library/time.html#time.strftime
#log_format                         = %(asctime)s %(levelname)-8s %(process)d %(message)s
#log_date_format                    = %Y-%m-%d %H:%M:%S
